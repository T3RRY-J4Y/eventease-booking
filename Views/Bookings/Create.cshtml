@model EventEase.Web.Models.Booking

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Booking</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" method="post">
            @Html.AntiForgeryToken()

            <!-- Single validation summary -->
            <div asp-validation-summary="All" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="EventId" class="control-label"></label>
                <select asp-for="EventId" class="form-control" asp-items="ViewBag.EventId" id="eventSelect"></select>
                <span asp-validation-for="EventId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="VenueId" class="control-label"></label>
                <select asp-for="VenueId" class="form-control" asp-items="ViewBag.VenueId"></select>
                <span asp-validation-for="VenueId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="BookingDate" class="control-label"></label>
                <input type="text" class="form-control" id="bookingDateDisplay" readonly />
                <span asp-validation-for="BookingDate" class="text-danger"></span>
            </div>

            <!-- Hidden input so BookingDate is actually posted -->
            <input type="hidden" asp-for="BookingDate" id="bookingDate" />

            <div class="form-group mt-3">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        function updateBookingDate(eventId) {
            var bookingDateHidden = document.getElementById('bookingDate');
            var bookingDateDisplay = document.getElementById('bookingDateDisplay');

            if (eventId) {
                fetch('/Events/GetEventDate/' + eventId)
                    .then(response => response.json())
                    .then(data => {
                        // format to yyyy-MM-dd so model binder accepts it
                        let date = new Date(data.date);
                        let formatted = date.toISOString().split('T')[0];

                        bookingDateHidden.value = formatted;
                        bookingDateDisplay.value = formatted;
                    })
                    .catch(() => {
                        bookingDateHidden.value = '';
                        bookingDateDisplay.value = '';
                    });
            } else {
                bookingDateHidden.value = '';
                bookingDateDisplay.value = '';
            }
        }

        // Populate on dropdown change
        document.getElementById('eventSelect').addEventListener('change', function () {
            updateBookingDate(this.value);
        });

        // Populate immediately for preselected event
        document.addEventListener('DOMContentLoaded', function () {
            var initialEventId = document.getElementById('eventSelect').value;
            if (initialEventId) {
                updateBookingDate(initialEventId);
            }
        });
    </script>
}
